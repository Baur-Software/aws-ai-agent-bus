name: MCP Server CI

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'mcp-server/**'
      - '.github/workflows/mcp-server-ci.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'mcp-server/**'
      - '.github/workflows/mcp-server-ci.yml'

defaults:
  run:
    working-directory: ./mcp-server

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: mcp-server/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm test
    
    - name: Test server startup
      run: timeout 5s npm start || echo "Server startup test completed"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: mcp-server/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=high
    
    - name: Check for sensitive data
      run: |
        if grep -r "baursoftware" src/ || grep -r "545027c4\|09c21e37" src/; then
          echo "Sensitive data found in source code"
          exit 1
        fi
        echo "No sensitive data found"

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        cat > Dockerfile << 'EOF'
        FROM node:20-alpine
        WORKDIR /app
        COPY package*.json ./
        RUN npm ci --only=production
        COPY src/ ./src/
        EXPOSE 3000
        CMD ["node", "src/server.js"]
        EOF
        docker build -t mcp-server .
    
    - name: Test Docker image
      run: |
        docker run -d --name test-server -p 3000:3000 -e PORT=3000 mcp-server node src/http-server.js
        sleep 3
        curl -f http://localhost:3000/health || exit 1
        docker stop test-server